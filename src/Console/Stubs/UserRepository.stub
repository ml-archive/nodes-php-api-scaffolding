<?php
use Illuminate\Support\Facades\Hash;
use Nodes\Database\Eloquent\Repository as NodesRepository;
use DummyNamespace\Models\Users\Tokens\Token;
use DummyNamespace\Models\Users\Validation\UserValidator;

/**
 * Class UserRepository
 *
 * @package DummyNamespace\Models\Users
 */
class UserRepository extends NodesRepository
{
    /**
     * User validator
     *
     * @var \DummyNamespace\Models\Users\UserValidator
     */
    protected $userValidator;

    /**
     * Constructor
     *
     * @access public
     * @param \DummyNamespace\Models\Users\User $model
     * @param \DummyNamespace\Models\Users\Validation\UserValidator $userValidator
     */
    public function __construct(User $model, UserValidator $userValidator)
    {
        $this->setupRepository($model);
        $this->userValidator = $userValidator;
    }

    /**
     * Authenticate user
     *
     * @access public
     * @param  string $email
     * @param  string $password
     * @return \DummyNamespace\Models\Users\User
     */
    public function login($email, $password)
    {
        $user = $this->with('token')
                     ->where('email', $email)
                     ->first();

        // E-mail does not exist
        if (empty($user)) {
            return false;
        }

        // If "e-mail verification" is enabled,
        // we need to check if user has verified his e-mail.
        if (config('nodes.api.email-verification.enabled', false) && !$user->isVerified()) {
            return false;
        }

        // Validate password
        if (!Hash::check($password, $user->password)) {
            return false;
        }

        return $user;
    }

    /**
     * Create new user
     *
     * @access public
     * @param  array $data
     * @return \DummyNamespace\Models\Users\User
     * @throws \Nodes\Validation\Exceptions\ValidationException
     * @throws \Nodes\Database\Exceptions\SaveFailedException
     */
    public function createUser(array $data)
    {
        // Validate data
        $this->userValidator->with($data)->validateOrFail();

        // Determine state of "e-mail verification" for creating users
        $shouldBeEmailVerified = config('nodes.api.email-verification.enabled', false);

        // If "e-mail verification" is disabled
        // we'll automatically set the user as verified
        if (!$shouldBeEmailVerified) {
            $data = array_merge([
                'is_verified' => 1,
                'verified_at' => Carbon::now()
            ], $data);
        }

        // Generate fresh model and populate with data
        $user = $this->create($data);

        // Generate token for user
        $user->token()->save(new Token([
            'user_id' => (int) $user->id,
            'token' => Hash::make(str_random())
        ]));

        // If "e-mail verification" is enabled,
        // then generate token and send e-mail with instructions
        if ($shouldBeEmailVerified) {
            $this->userEmailVerificationRepository->sendVerificationEmail($user);
        }

        return $user;
    }

    /**
     * Update user
     *
     * @access public
     * @param  \DummyNamespace\Models\Users\User $user
     * @param  array $data
     * @return \DummyNamespace\Models\Users\User
     * @throws \Nodes\Validation\Exceptions\ValidationException
     * @throws \Nodes\Database\Exceptions\SaveFailedException
     */
    public function updateUser(User $user, $data)
    {
        // Fill user with new data
        $user->fill($data);

        // Validate user with new data
        $this->userValidator->withModel($user)->validateOrFail();

        // Save updated user
        $user->save();

        return $user;
    }
}
