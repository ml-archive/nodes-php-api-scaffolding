<?php
namespace DummyNamespace\Controllers\Api;

use Illuminate\Routing\Controller as IlluminateController;
use Illuminate\Support\Facades\Input;
use Nodes\Api\Auth\Exceptions\UnauthorizedException;
use Nodes\Api\Http\Response;
use Nodes\Api\Routing\Helpers as ApiHelper;
use DummyNamespace\Models\Users\UserRepository;
use DummyNamespace\Models\Users\Transformers\UserTransformer;

/**
 * Class UsersController
 *
 * @package DummyNamespace\Controllers\Api
 */
class UsersController extends IlluminateController
{
    use ApiHelper;
    
    /**
     * User Repository
     *
     * @var \DummyNamespace\Models\Users\UserRepository
     */
    protected $userRepository;

    /**
    * Constructor
    *
    * @access public
    * @param  \DummyNamespace\Models\Users\UserRepository $userRepository
    */
    public function __construct(UserRepository $userRepository)
    {
        $this->userRepository = $userRepository;
    }

    /**
    * Retrieve authenticated user's details
    *
    * @access public
    * @return \Nodes\Api\Http\Response
    */
    public function me() : Response
    {
        return $this->response->item(api_user(), new UserTransformer);
    }

    /**
    * Retrieve a specific user's details
    *
    * @access public
    * @param  integer $userId
    * @return \Nodes\Api\Http\Response
    */
    public function details($userId) : Response
    {
        $user = $this->userRepository->getByIdOrFail($userId);

        return $this->response->item($user, new UserTransformer);
    }

    /**
    * Authenticate user
    *
    * @access public
    * @return \Nodes\Api\Http\Response
    * @throws \Nodes\Api\Auth\Exceptions\UnauthorizedException
    */
    public function login() : Response
    {
        // Retrieve e-mail & password
        $email = Input::get('email');
        $password = Input::get('password');

        // Authenticate user
        $user = $this->userRepository->login($email, $password);
        if (empty($user)) {
            throw new UnauthorizedException('Authentication failed');
        }

        return $this->response->item($user, new UserTransformer);
    }

    /**
    * Create new user
    *
    * @access public
    * @return \Nodes\Api\Http\Response
    * @throws \Nodes\Validation\Exceptions\ValidationException
    * @throws \Nodes\Database\Exceptions\SaveFailedException
    */
    public function store() : Response
    {
        // Retrieve data
        $data = Input::all();

        // Create new user
        $user = $this->userRepository->createUser($data);

        return $this->response->item($user, new UserTransformer)->setStatusCode(201);
    }

    /**
    * Update authenticated user
    *
    * @access public
    * @return \Nodes\Api\Http\Response
    * @throws \Nodes\Validation\Exceptions\ValidationException
    * @throws \Nodes\Database\Exceptions\SaveFailedException
    */
    public function update() : Response
    {
        // Retrieve data
        $data = Input::except('password');

        // Update user details
        $user = $this->userRepository->updateUser(api_user(), $data);

        return $this->response->item($user, new UserTransformer);
    }
}
